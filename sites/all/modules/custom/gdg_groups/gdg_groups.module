<?php
/**
 * @file
 * The GDG Groups Module.
 *
 * Several tweaks to the Group module.
 */

/**
 * Implementation of hook_user_login().
 */
function gdg_groups_user_login(&$edit, $account) {

  $redirect = _gdg_groups_redirect_location($account);

  // Unless there is already a redirection going, or the user is trying to reset
  // his or her password, we redirect to $redirect.
  if (empty($_GET['destination'])
    && !is_null($redirect)
    && (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset')) {
    $_GET['destination'] = $redirect;
  }

}

/**
 * Implementation of hook_theme().
 */
function gdg_groups_theme($existing, $type, $theme, $path) {

  return array(
    'gdg_groups_ward_admin' => array(
      'template' => 'templates/gdg_groups_ward_admin',
      'variables' => array(
        'group' => NULL,
      )
    ),
  );

}

/**
 * Implementation of hook_menu_alter().
 */
function gdg_groups_menu_alter(&$items) {

  // Give more verbose titles.
  if (isset($items['group/%group/member'])) {
    $items['group/%group/member']['title'] = 'List ward user(s)';
  }

  if (isset($items['group/%group/add'])) {
    $items['group/%group/add']['title'] = 'Add ward user';
  }

  if (isset($items['group/%group/edit'])) {
    $items['group/%group/edit']['title'] = 'Edit ward information';
  }

  // Add Administration menu.
  $items['group/%group/admin'] = array(
    'title' => 'Ward Administration',
    'page callback' => 'gdg_groups_ward_admin',
    'page arguments' => array(1),
    'access callback' => $items['group/%group/edit']['access callback'],
    'access arguments' => $items['group/%group/edit']['access arguments'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['group/%group/admin/edit'] = $items['group/%group/edit'];

}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function gdg_groups_form_gadd_add_member_form_alter(&$form, &$form_state,
  $form_id) {

  $group = group_load(arg(1));

  $form['help1'] = array(
    '#type' => 'markup',
    '#markup' => t('To add an existing LDSTabs user to your ward, enter his or her username below.  Choose whether to make this person a Ward Mission Leader or not and then click the &quot;Add user to ward&quot; button.'),
    '#prefix' => '<p class="help">',
    '#suffix' => '</p>',
    '#weight' => -3,
  );

  $form['help2'] = array(
    '#type' => 'markup',
    '#markup' => t('If your user does not yet have an account, you must first invite him or her.  Use the &quot;Invite user to join LDSTabs&quot; form, below, to invite your user.  Once he or she has accepted, then you may add that user to your ward.'),
    '#prefix' => '<p class="help">',
    '#suffix' => '</p>',
    '#weight' => -2,
  );

  $form['title'] = array(
    '#type' => 'markup',
    '#markup' => t('Add user to @ward', array('@ward' => $group->label())),
    '#prefix' => '<h2>',
    '#suffix' => '</h2>',
    '#weight' => -1,
  );

  $form['submit']['#value'] = t('Add user to ward');

}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function gdg_groups_form_group_member_overview_form_alter(&$form, &$form_state,
  $form_id) {

  $group = group_load(arg(1));

  $form['help1'] = array(
    '#type' => 'markup',
    '#markup' => t('This form allows you to manage existing users of your ward.'),
    '#prefix' => '<p class="help">',
    '#suffix' => '</p>',
    '#weight' => -3,
  );

  $form['help2'] = array(
    '#type' => 'markup',
    '#markup' => t('If you wish to add a new user to your ward or invite a user to LDSTabs, you must use the <a href="add">Add ward user</a> screen.'),
    '#prefix' => '<p class="help">',
    '#suffix' => '</p>',
    '#weight' => -2,
  );
/*
  $form['title'] = array(
    '#type' => 'markup',
    '#markup' => t('Add user to @ward', array('@ward' => $group->label())),
    '#prefix' => '<h2>',
    '#suffix' => '</h2>',
    '#weight' => -1,
  );

  $form['submit']['#value'] = t('Add user to ward');
*/
}


/**
 * Implementation of hook_block_view_MODULE_DELTA_alter().
 */
function gdg_groups_block_view_invite_invite_add_invite_by_email_alter(&$data,
  $block) {

  $data['subject'] =
    t('Invite user to join LDSTabs');
}

/**
 * Implementation of hook_menu().
 */
function gdg_groups_menu() {

  $items = array();
  $items['group/home'] = array(
    'name' => 'Home',
    'page callback' => '_gdg_groups_group_home',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
//    'access arguments' => array('access content'),
  );

  return $items;

}

/**
 * Redirect the user to their home group (if any), or /user (if none).
 */
function _gdg_groups_group_home() {

  global $user;

  if ($redirect = _gdg_groups_redirect_location($user)) {
    drupal_goto($redirect);
  }
  else {
    drupal_goto('user');
  }

}

/**
 * Get the redirection location.
 *
 * @param stdClass $account
 *   The user account.
 *
 * @return string
 *   The path to which to redirect.
 */
function _gdg_groups_redirect_location($account) {

  // Retrieve all active memberships.
  if ($memberships = GroupMembership::getByActiveStatus($account->uid)) {
    $first = array_shift($memberships);
    $redirect = 'group/' . $first->gid;
    return $redirect;
  }

}

/**
 * Show the Adminstration menu.
 */
function gdg_groups_ward_admin($group) {

  return array(
    '#theme' => 'gdg_groups_ward_admin',
    '#group' => $group,
  );

}
